#!/usr/bin/env python

import litrepl
from litrepl import *
from litrepl import __version__, eval_section_
from os import chdir, getcwd
from subprocess import check_output, DEVNULL, CalledProcessError
from argparse import ArgumentParser
from tempfile import mkdtemp

LOCSHELP='(N|$|N..N)[,(...)] where N is either: number,$,ROW:COL'

if __name__=='__main__':
  ap=ArgumentParser(prog='litrepl.py')
  ap.add_argument('-v','--version',action='version',version=__version__ or '?',help='Print the version')
  ap.add_argument('--filetype',metavar='STR',default='markdown',help='markdown|tex')
  ap.add_argument('--interpreter',metavar='EXE',default='auto',help='python|ipython|auto')
  ap.add_argument('--timeout-initial',type=str,metavar='SEC',default='inf')
  ap.add_argument('--timeout-continue',type=str,metavar='SEC',default='inf')
  ap.add_argument('--propagate-sigint',action='store_true',help='Propagate sigint to the background interpeter')
  ap.add_argument('-d','--debug',type=int,metavar='LEVEL',default=0)
  ap.add_argument('--verbose',action='store_true',help='Be verbose')
  ap.add_argument('--auxdir',type=str,metavar='DIR',default=None,help="Directory to store auxilary files")
  ap.add_argument('-C','--workdir',type=str,metavar='DIR',default=None,help="Directory to run from")
  ap.add_argument('-e','--exception-exit',type=str,metavar='ERRCODE',default=None, help='Return this error code at first exception')
  ap.add_argument('--pending-exit',type=str,metavar='ERRCODE',default=None, help='Return this error code at pending execution')
  ap.add_argument('--standalone-session',action='store_true',help='Do not reuse the interpreter session of the current directory')
  ap.add_argument('--map-cursor',type=str,metavar='LINE:COL',default=None,help="Calculate cursor coordinates, see documentation")
  ap.add_argument('--result-textwidth',type=str,metavar='NUM',default=None,help="Wrap long result lines")
  ap.add_argument('--type',type=str,help='Interpreter type (python|ai)',default=None)
  sps=ap.add_subparsers(dest='command',help='commands to execute')
  sstart=sps.add_parser('start',help='Start the interpreter in the background')
  sstop=sps.add_parser('stop',help='Stop the interpreter')
  srestart=sps.add_parser('restart',help='Restart the interpreter')
  sps.add_parser('parse',help='Parse the input file (diagnostics)')
  sps.add_parser('parse-print',help='Parse and print the input file (diagnostics, no changes are expected)')
  sstatus=sps.add_parser('status',help='Print the status of the worker')
  sstatus.add_argument('--tty',action='store_true',help='Read from interactive terminal')
  apes=sps.add_parser('eval-section',help='Evaluate the section under the cursor')
  apes.add_argument('--line',type=int,default=None)
  apes.add_argument('--col',type=int,default=None)
  eps=sps.add_parser('eval-sections',help='Evaluate one or more sections by location')
  eps.add_argument('locs',type=str,metavar='LOCS',default='0..$',help=LOCSHELP,nargs='?')
  ecs=sps.add_parser('eval-code',help='Evaluate the given lines of code')
  srepl=sps.add_parser('repl',help='Connect interactive shell to the terminal')
  ips=sps.add_parser('interrupt',help='Raise KeyboardInterrupt exception to the interpreter')
  ips.add_argument('locs',metavar='LOCS',default='0..$',help=LOCSHELP,nargs='?')
  a=ap.parse_args(sys.argv[1:])

  a.timeout_initial=float(a.timeout_initial)
  a.timeout_continue=float(a.timeout_continue)

  if a.exception_exit:
    a.exception_exit=int(a.exception_exit)
  if a.pending_exit:
    a.pending_exit=int(a.pending_exit)
  if a.result_textwidth:
    a.result_textwidth=int(a.result_textwidth)

  if a.map_cursor:
    line,col,output=a.map_cursor.split(":")
    a.map_cursor=(int(line),int(col))
    a.map_cursor_output=output

  if a.debug>0:
    litrepl.eval.DEBUG=True
    litrepl.base.DEBUG=True

  type_or_def = a.type if a.type is not None else 'python'

  if a.workdir:
    chdir(a.workdir)

  if a.standalone_session:
    if a.auxdir is None:
      a.auxdir=mkdtemp(prefix="litrepl-auxdir")
    else:
      assert not running(a), \
        f"Explicitly-specified auxdir ({a.auxdir}) already contains a running session"

  if a.command=='start':
    assert not a.standalone_session, f"`--standalone-session` is not compatible with `{a.command}`"
    start(a,name2st(type_or_def))
  elif a.command=='stop':
    assert not a.standalone_session, f"`--standalone-session` is not compatible with `{a.command}`"
    for st in SType:
      if a.type in {st2name(st),"all",None}:
        stop(a,st)
  elif a.command=='restart':
    assert not a.standalone_session, f"`--standalone-session` is not compatible with `{a.command}`"
    if a.type in {'all',None}:
      for st in SType:
        if running(a,st):
          restart(a,st)
    else:
      restart(a,name2st(a.type))
  elif a.command=='parse':
    assert not a.standalone_session, f"`--standalone-session` is not compatible with `{a.command}`"
    t=parse_(GRAMMARS[a.filetype])
    print(t.pretty())
    exit(0)
  elif a.command=='parse-print':
    sr0=SecRec(set(),{})
    ecode=eval_section_(a,parse_(GRAMMARS[a.filetype]),sr0)
    exit(0 if ecode is None else ecode)
  elif a.command=='eval-section':
    t=parse_(GRAMMARS[a.filetype])
    nsecs=SecRec(set(solve_cpos(t,[(a.line,a.col)]).cursors.values()),{})
    ecode=eval_section_(a,t,nsecs)
    exit(0 if ecode is None else ecode)
  elif a.command=='eval-sections':
    t=parse_(GRAMMARS[a.filetype])
    nsecs=solve_sloc(a.locs,t)
    ecode=eval_section_(a,t,nsecs)
    exit(0 if ecode is None else ecode)
  elif a.command=='repl':
    st=name2st(type_or_def)
    fns=pipenames(a,st)
    if not running(a,st) or a.standalone_session:
      start(a,st)
    print("Opening the interpreter terminal (NO PROMPT, USE `Ctrl+D` TO EXIT)")
    system(f"socat - 'PIPE:{fns.outp},flock-ex-nb=1!!PIPE:{fns.inp},flock-ex-nb=1'")
    ecode=interpExitCode(fns,undefined=200)
    if a.standalone_session:
      stop(a,st)
    exit(0 if ecode is None else ecode)
  elif a.command=='interrupt':
    assert not a.standalone_session, f"`--standalone-session` is not compatible with `{a.command}`"
    tree=parse_(GRAMMARS[a.filetype])
    sr=solve_sloc(a.locs,tree)
    sr.nsecs|=set(sr.pending.keys())
    ecode=eval_section_(a,tree,sr,interrupt=True)
    exit(ecode)
  elif a.command=='eval-code':
    st=name2st(type_or_def)
    fns=pipenames(a,st)
    if not running(a,st) or a.standalone_session:
      start(a,st)
    ss=settings(fns)
    print(eval_code(a,fns,ss,sys.stdin.read()))
    ecode=interpExitCode(fns,undefined=200)
    if a.standalone_session:
      stop(a,st)
    exit(0 if ecode is None else ecode)
  elif a.command=='status':
    if a.standalone_session:
      st=name2st(type_or_def)
      start(a,st)
      ecode=status(a,st,__version__)
      stop(a,st)
      exit(0 if ecode is None else ecode)
    else:
      ecodes=set()
      for st in SType:
        if a.type in {st2name(st),"all",None}:
          ecodes.add(status(a,st,__version__))
      pdebug(f"ecodes: {ecodes}")
      exit(0 if len(ecodes - {0,None})==0 else 1)
  else:
    pstderr(f'Unknown command: {a.command}')
    exit(1)

